#!/usr/bin/env bash

#GNU GENERAL PUBLIC LICENSE
#                      Version 3, 29 June 2007
#
#    Copyright (C) 2022  PhosCity
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Project repository: https://github.com/PhosCity/muxsh

# Version number
VERSION="0.2.1"

# Variables
dependencies=(fzf java mkvmerge curl sed grep cut)
folder="${XDG_CACHE_HOME:-${HOME}/.cache}/subkt"
output="${folder}/subkt.txt"
config_folder="${XDG_CONFIG_HOME:-${HOME}/.config}/muxkt"
config="${config_folder}/config"

# Animations
# https://github.com/Silejonu/bash_loading_animations
passing_dots=(0.25 '.  ' '.. ' ' ..' '  .' '   ')
active_loading_animation=("${passing_dots[@]}")
# Extract the delay between each frame from the active_loading_animation array
loading_animation_speed="${active_loading_animation[0]}"
unset "active_loading_animation[0]"
# Stop the animation and restore the normal cursor if the script is interrupted
trap stop_loading_animation SIGINT

loading_animation() {
	while true; do
		tput civis
		for frame in "${active_loading_animation[@]}"; do
			printf "\r%s" "${frame}"
			sleep "${loading_animation_speed}"
		done
	done
}

start_loading_animation() {
	loading_animation &
	loading_animation_id="${!}"
}

stop_loading_animation() {
	kill "${loading_animation_id}" &>/dev/null
	printf "\n"
	tput cnorm
}

# Create required directories and config file if they're not present
[[ ! -d "${folder}" ]] && mkdir -p "${folder}"
[[ ! -d "${config_folder}" ]] && mkdir -p "${config_folder}"
[[ -f "${config}" ]] || : >"${config}"

# Functions
die() {
	red_text "$*"
	exit 1
}

red_text() {
	printf "\033[1;31m\n%s\033[0m\n" "$*" >&2
}

green_text() {
	printf "\033[1;31m\n%s\033[0m\n" "$*" >&2
}

# Check for update
update_script() {
	update="$(curl -s "https://raw.githubusercontent.com/PhosCity/muxsh/main/muxsh" | diff -u "$0" -)"
	if [[ "${1}" == "check" ]] && [[ -n "${update}" ]]; then
		printf "There seems to be a new version available in github.\nEnter \'muxsh -u\' in the terminal to update."
		sleep 3
	elif [[ "${1}" == "update" ]] && [[ -n "${update}" ]]; then
		if printf '%s\n' "${update}" | patch "$0" -; then
			echo "Script has been updated"
		else
			die "Can't update for some reason!"
		fi
	fi
}

# Check dependencies
dep_ch() {
	for dep; do
		if ! command -v "${dep}" >/dev/null; then
			missing_dep="${missing_dep}\"${dep}\" "
		fi
	done
}

# Read config and get all the key, value pair for a particular section
get_section() {
	section_data=$(sed -e "0,/^\[$1\]$/d" -e '/^$/Q' -e '/[.*]/d' "${config}")
	echo "${section_data}"
}

# Add project to the config
config_add() {
	if ! grep -q "\[Project\]" "${config}"; then
		echo "Config does not exist. Creating new one."
		printf "[Project]\n\n" >>"${config}"
	fi
	while :; do
		printf "Name of Project: "
		read -r prj
		if [[ -z "${prj}" ]]; then
			echo "Project is needed for continuing."
		else
			printf "Path of the project: "
			read -r pth
			if [[ ! -d "${pth}" ]]; then
				echo "Not a valid path."
				pth=""
			elif [[ ! -f "${pth}/build.gradle.kts" ]]; then
				echo "Path does not contains Subkt config. Try again."
				pth=""
			fi
		fi
		if [[ -n "${prj}" ]] && [[ -n "${pth}" ]]; then
			echo "Adding ${prj} to the config..."
			sed -i "/\[Project\]/a ${prj} = ${pth}" "${config}"
		fi
		printf "Do you want to continue adding projects[y/n]: "
		read -r cont
		case "${cont}" in
			y) ;;
			*) break ;;
		esac
	done
}

# Remove project from the config
# TODO: Not a good implementation rn. Fix
config_remove() {
	if ! grep -q "\[Project\]" "${config}"; then
		echo "There are no projects in the config to remove."
	else
		project=$(get_section "Project" | cut -d= -f1 | sed "s/ $//g" | fzf)
		to_delete=$(get_section "Project" | grep "${project}")
		line_to_delete=$(grep -n -F -x "${to_delete}" "${config}" | cut -d: -f1)
		if [[ -n "${line_to_delete}" ]]; then
			sed -i "${line_to_delete}d" "${config}"
			echo "Removed ${project} from the config"
		fi
	fi
}

# Choose project and path from config if they are already not passed as an argument.
# Then cd to that directory.
# Also if config is not found, then prompt user to add one.
change_directory() {
	if [[ -z "${project}" ]]; then
		if ! grep -q "\[Project\]" "${config}"; then
			config_add
		fi
		project_list=$(get_section "Project" | grep "=" | cut -d= -f1 | sed "s/ $//g")
		if [[ -n "${project_list}" ]]; then
			project=$(echo "${project_list}" | fzf)
		else
			die "No project in config. Please add one by entering \`muxsh -c add\` in the terminal."
		fi
	fi
	[[ -z "${project}" ]] && die "Project was not selected by the user."
	[[ -z "${project_path}" ]] && project_path=$(get_section "Project" | grep "${project}" | cut -d= -f2 | sed "s/\"//g;s/^ //g")
	cd "${project_path}" || die "Path in config is not correct."
}

check_episode() {
	case "$1" in
		*[!0-9]*) die "The episode provided \"${1}\" is not a digit." ;;
		# In case user inputs single digit, pad it with 0
		[0-9])
			pad_ep=$(printf "%02d" "$1")
			episode="${episode}${pad_ep} "
			;;
		*) episode="${episode}$1 " ;;
	esac
}

check_path() {
	buildfile="${1}"/build.gradle.kts
	if [[ ! -d "${1}" ]]; then
		red_text "${1} is not a valid path."
		pth=""
		exit 1
	elif [[ ! -f "${buildfile}" ]]; then
		red_text "${1} does not have any SubKt configs. Exiting."
		pth=""
		exit 1
	fi
}

help_text() {
	while IFS= read -r line; do
		printf "%s\n" "${line}"
	done <<EOF
USAGE: ${0##*/} [OPTIONS] arguments [Project] [Episode/s]
[OPTIONS]
  -h	 		Show this help text and exit
  -v	 		Print the version number and exit
  -a	 		Alternate folder structure(./arc/episode)
  -p [path]		Path of the project (Does not have to be in config)
  -o	 		See acutal subkt output of last mux in case you need it
  -u	 		Update the script
  -r	 		Repeat last muxing action
  -c [add/remove]	Add or remove project in the config
EOF
}

attachedFonts() {
	green_text "Fonts Attached"
	grep -i -o "^Attaching.*[ot]tf" "$1" | sed "s/Attaching //" | sort
}

tasksLists() {
	green_text "Tasks Performed:"
	grep "Task :[^S]" "$1" | sed "
	  s/^.*Task ://g
	  s/\..*default//g
	  s/.*chapters/Create chapters/g
	  s/.*merge/Merge subtitles/g
	  s/.*mux/Mux the files into an mkv/g
	  s/.*dub/Create dubtitles/g
  	"
}

chapter() {
	green_text "Chapters Generated:"
	grep "CHAPTER" "$1"
}

warning() {
	red_text "WARNINGS:"
	grep "conflicting .* value from" "$1"
	grep -e 'warning:' -e 'Validating fonts' "$1" | sed "s/warning: //; s/\.\.\.$//"
}

tracks() {
	green_text "Muxed Tracks:"
	grep "^Track" "$1"
}

final() {
	printf "\n"
	grep "BUILD" "$1"
}

failure() {
	grep -e "FAILED" \
		-e "What went wrong" \
		-e "A problem occurred" \
		-e "Execution failed for task" \
		-e "Error resolving" \
		-e "not found in root project" \
		-e "style already exists" \
		-e "one or more fatal font-related issues encountered" \
		-e "FileNotFoundException" \
		-e "mkvmerge -J command failed" \
		-e "mkvmerge -J command timed out for file" \
		-e "malformed property" \
		-e "mkvmerge failed:" \
		-e "Error: " \
		-e "FAILURE: " \
		-e "is ambiguous in root project" \
		-e "could not find target sync line" \
		-e "could not find property file" \
		-e "Could not create task" \
		-e "no chapter definitions found;" \
		-e "Negative time after shifting line from" \
		-e "Could not resolve" \
		-e "Could not list available versions" \
		-e "duplicate target sync lines with value" \
		-e "could not post to webhook:" \
		-e "Unexpected CRC for" \
		-e "not a valid CRC:" \
		-e "malformed line in" \
		-e "Recursive property dependency detected:" \
		-e "Attempting to access unfinished task" \
		-e "Attempted to access entry" \
		-e "more than one file added, but no root set, or conflicting roots." \
		-e "couldn't upload torrent:" \
		-e "request failed:" \
		-e "could not upload" \
		-e "can't convert type to destination directory:" \
		-e "Invalid SSL Session" \
		-e "Could not create directory:" \
		-e "ssh command failed" \
		-e "no conversion available from String to" \
		-e "Invalid value for Collisions:" \
		-e "too few fields in section" \
		-e "could not parse" \
		-e "no match for property name" \
		-e "not a valid time:" \
		-e "not a valid color:" \
		-e "not a valid boolean:" \
		-e "not a valid boolean:" \
		"$1"
}

all() {
	if [[ -f "$1" ]]; then
		tasksLists "$1"
		grep -q "Attaching chapters" "$1" && chapter "$1"
		grep -q "^Track" "$1" && tracks "$1"
		grep -q "^Attaching.*[ot]tf" "$1" && attachedFonts "$1"
		grep -q "warning:" "$1" && warning "$1"
		final "$1"
	else
		echo "Output file not found so output cannot be displayed."
	fi
}

while getopts ':hvap:ourc:' OPT; do
	case ${OPT} in
		:)
			red_text "Please provide an argument to -${OPTARG}"
			help_text | grep -e "USAGE" -e "-${OPTARG}"
			exit 2
			;;
		h)
			help_text
			exit 0
			;;
		o)
			cat "${output}"
			exit 0
			;;
		p)
			check_path "${OPTARG}"
			project_path="${OPTARG}"
			project="${OPTARG}"
			;;
		r)
			project="Repeat Last"
			;;
		a)
			alt_folder="yes"
			;;
		c)
			case "${OPTARG}" in
				"add") config_add ;;
				"remove") config_remove ;;
				*)
					echo "Not a valid argument."
					help_text | grep -e "USAGE" -e "-${OPT}"
					;;
			esac
			exit 0
			;;
		v)
			echo "muxsh, Version: ${VERSION}"
			exit 0
			;;
		u)
			update_script "update"
			exit 0
			;;
		*)
			echo "Invalid option: -${OPTARG}."
			help_text
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

# check for new version of the script
update_script "check"

# check for main dependencies
for i in "${dependencies[@]}"; do
	dep_ch "${i}"
done
[[ -n "${missing_dep}" ]] && die "${missing_dep}not found. Please install all missing dependencies."

# Read History
if [[ "${project}" = "Repeat Last" ]]; then
	_hist=$(get_section "History" | tr -d "\n")
	project=$(cut -d= -f1 <<<"${_hist}" | sed "s/[[:space:]]*$//")
	project_path=$(cut -d= -f2 <<<"${_hist}" | cut -d';' -f1 | sed "s/^ //")
	episode=$(cut -d= -f2 <<<"${_hist}" | cut -d';' -f2 | tr -d "\n" | tr "," "\n")
fi

# Read query (Should be given in `<path to script> <project> <episode or space seperated episodes>` format)
if [[ -n "$*" ]]; then
	query="$*"
	project_query=$(echo "${query}" | cut -d" " -f1)
	episode_query=$(echo "${query}" | cut -d" " -f2-)
	for item in ${episode_query}; do
		check_episode "${item}"
	done
	episode=$(echo "${episode}" | tr -s \  "\n" | sort)

	# If you're already in the project path, just do `muxsh . <episode>` to mux the <episode> of current path
	if [[ "${project_query}" == "." ]]; then
		project_path=$(pwd)
		check_path "${project_path}"
		project=$(get_section "Project" | grep "${project_path}" | cut -d= -f1 | sed "s/ *$//")
		[[ -z "${project}" ]] && project="${project_path}"
	# Check if the project passed by the user exists in config or not.
	else
		project=$(get_section "Project" | cut -d= -f1 | sed "s/ *$//g" | grep "${project_query}")
		[[ -z "${project}" ]] && die "Project \"${project_query}\" not found in config."
	fi
fi

# Change directory to the project folder
change_directory

# Check if a project has an alternate folder set in config in [Alt-Folder] section
if grep -q "\[Alt-Folder\]" "${config}"; then
	alt=$(get_section "Alt-Folder" | grep "${project}")
	[[ -n "${alt}" ]] && alt_folder="yes"
fi

# Get episode to mux
if [[ "${alt_folder}" == "yes" ]] && [[ -z "${episode}" ]]; then

	# Get arcs or seasons
	[[ -z "${arc}" ]] && arc=$(find . -maxdepth 1 -type d -name '[0-9]*' | cut -c 3- | sort | fzf --layout=reverse --prompt="Select an arc: ")
	[[ -z "${arc}" ]] && die "Arc was not selected by the user"

	# Get key of the arc or season.
	# Generally, its the folder name of the arc, minus the space and all character uncapitalized.
	key=$(echo "${arc}" | cut -c 4- | tr -d "[:space:]" | tr "[:upper:]" "[:lower:]")

	# In case the key does not follow the lower, unspaced rule, define exceptions in the config
	exception=$(get_section "Exceptions" | grep "${key}" | cut -d= -f2 | sed "s/^ //")
	if [[ -n "${exception}" ]]; then
		key="${exception}"
	fi
	[[ -z "${key}" ]] && die "Key for an arc could not be determined."

	[[ -z "${episode}" ]] && episode=$(find "${arc}"/. -maxdepth 1 -type d -name '[0-9]*' | cut -d/ -f3 | sort | fzf --layout=reverse --multi --bind ctrl-a:toggle-all --prompt="Press ENTER for single, TAB for multiple and CTRL+a for all episodes.: ")

else

	[[ -z "${episode}" ]] && episode=$(find . -maxdepth 1 -type d -name '[0-9]*' | cut -c 3- | sort | fzf --layout=reverse --multi --bind ctrl-a:toggle-all --prompt="Press ENTER for single, TAB for multiple and CTRL+a for all episodes.: ")

fi
[[ -z "${episode}" ]] && die "Episode was not provided by the user."

# Create an array with all the selected episodes
mapfile -t ep <<<"${episode}"

# Add history to config file
if [[ "${alt_folder}" == "yes" ]] && [[ -z "${episode}" ]]; then
	ep_hist=$(echo "${episode}" | sed "s/^/${key}_/g" | tr "\n" "," | sed "s/,$//g")
else
	ep_hist=$(echo "${episode}" | tr "\n" "," | sed "s/,$//g")
fi
hist=$(printf "%s = %s;%s" "${project}" "${project_path}" "${ep_hist}")
if ! grep -q "\[History\]" "${config}"; then
	printf "\n[History]\n\n" >>"${config}"
fi
sed -i "/\[History\]/!b;n;c${hist}" "${config}"

tput clear
for i in "${ep[@]}"; do

	if [[ "${alt_folder}" == "yes" ]] && [[ -z "${episode}" ]]; then
		mux_key="${key}"_"${i}"
	else
		mux_key="${i}"
	fi
	printf "Muxing \033[1;32m\"%s\" \033[0m- Episode \033[1;32m%s \033[0m\n" "${project}" "${mux_key}"
	# Mux the episode
	start_loading_animation
	if ./gradlew --console=plain mux."${mux_key}" >"${output}" 2>&1; then
		stop_loading_animation
		all "${output}"
	else
		stop_loading_animation
		warning "${output}"
		failure "${output}"
	fi
done
